/* tslint:disable */
/* eslint-disable */
/**
 * MyCV API
 * MyCV Django API
 *
 * The version of the OpenAPI document: v0.1
 * Contact: diogo.gomes77@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { Developer } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
/**
 * DevelopersApi - axios parameter creator
 * @export
 */
export const DevelopersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developersList: async (
      page?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/developers/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions['auth'] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} id A unique integer value identifying this developer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developersRead: async (
      id: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling developersRead.',
        );
      }
      const localVarPath = `/developers/{id}/`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions['auth'] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DevelopersApi - functional programming interface
 * @export
 */
export const DevelopersApiFp = function (configuration?: Configuration) {
  return {
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async developersList(
      page?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2002>
    > {
      const localVarAxiosArgs = await DevelopersApiAxiosParamCreator(
        configuration,
      ).developersList(page, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} id A unique integer value identifying this developer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async developersRead(
      id: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Developer>
    > {
      const localVarAxiosArgs = await DevelopersApiAxiosParamCreator(
        configuration,
      ).developersRead(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DevelopersApi - factory interface
 * @export
 */
export const DevelopersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developersList(
      page?: number,
      options?: any,
    ): AxiosPromise<InlineResponse2002> {
      return DevelopersApiFp(configuration)
        .developersList(page, options)
        .then(request => request(axios, basePath));
    },
    /**
     * API endpoint that allows developers to be viewed or edited.
     * @param {number} id A unique integer value identifying this developer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developersRead(id: number, options?: any): AxiosPromise<Developer> {
      return DevelopersApiFp(configuration)
        .developersRead(id, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for developersList operation in DevelopersApi.
 * @export
 * @interface DevelopersApiDevelopersListRequest
 */
export interface DevelopersApiDevelopersListRequest {
  /**
   * A page number within the paginated result set.
   * @type {number}
   * @memberof DevelopersApiDevelopersList
   */
  readonly page?: number;
}

/**
 * Request parameters for developersRead operation in DevelopersApi.
 * @export
 * @interface DevelopersApiDevelopersReadRequest
 */
export interface DevelopersApiDevelopersReadRequest {
  /**
   * A unique integer value identifying this developer.
   * @type {number}
   * @memberof DevelopersApiDevelopersRead
   */
  readonly id: number;
}

/**
 * DevelopersApi - object-oriented interface
 * @export
 * @class DevelopersApi
 * @extends {BaseAPI}
 */
export class DevelopersApi extends BaseAPI {
  /**
   * API endpoint that allows developers to be viewed or edited.
   * @param {DevelopersApiDevelopersListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevelopersApi
   */
  public developersList(
    requestParameters: DevelopersApiDevelopersListRequest = {},
    options?: any,
  ) {
    return DevelopersApiFp(this.configuration)
      .developersList(requestParameters.page, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * API endpoint that allows developers to be viewed or edited.
   * @param {DevelopersApiDevelopersReadRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevelopersApi
   */
  public developersRead(
    requestParameters: DevelopersApiDevelopersReadRequest,
    options?: any,
  ) {
    return DevelopersApiFp(this.configuration)
      .developersRead(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath));
  }
}
